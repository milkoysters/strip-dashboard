# app.py (Phi√™n b·∫£n 1.7 - Ho√†n ch·ªânh v√† S·ª≠a l·ªói)

# === C√ÅC IMPORT C·∫¶N THI·∫æT ===
import asyncio
import logging
import os
import re
import shutil
import subprocess
import sys
import time
from datetime import datetime
from pathlib import Path
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import HTMLResponse, StreamingResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
import uvicorn

try:
    from pyrogram import Client, filters, enums
    from pyrogram.errors import MessageNotModified, FloodWait
    from pyrogram.handlers import MessageHandler, CallbackQueryHandler
    from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
    from seleniumwire import webdriver
    from selenium.webdriver.chrome.service import Service
    from webdriver_manager.chrome import ChromeDriverManager
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import TimeoutException, NoSuchElementException
    from selenium.webdriver.common.by import By
except ImportError:
    print("L·ªñI: Thi·∫øu th∆∞ vi·ªán. Vui l√≤ng ch·∫°y: pip install --upgrade pyrogram tgcrypto selenium-wire webdriver-manager fastapi uvicorn[standard]")
    exit(1)


# === C·∫§U H√åNH LOGGING ===
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
logging.getLogger('seleniumwire').setLevel(logging.WARNING)
logging.getLogger('webdriver_manager').setLevel(logging.WARNING)

# === C·∫§U H√åNH T·ª™ BI·∫æN M√îI TR∆Ø·ªúNG ===
API_ID = int(os.getenv('API_ID', '12345'))
API_HASH = os.getenv('API_HASH', 'default_hash')
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_USERS_STR = os.getenv('ADMIN_USERS', '123456789')
ADMIN_USERS = [int(user_id.strip()) for user_id in ADMIN_USERS_STR.split(',')]
CONTROL_GROUP_ID = os.getenv('CONTROL_GROUP_ID', '@your_control_group')
DEFAULT_UPLOAD_CHANNEL = os.getenv('DEFAULT_UPLOAD_CHANNEL', '@your_default_channel')
HIGHLIGHT_UPLOAD_CHANNEL = os.getenv('HIGHLIGHT_UPLOAD_CHANNEL', '@your_highlight_channel')
MONITOR_CHAT_ID = os.getenv('MONITOR_CHAT_ID', 'your_monitor_chat')
MONITOR_MESSAGE_ID = int(os.getenv('MONITOR_MESSAGE_ID', '1'))

# === C·∫§U H√åNH ƒê∆Ø·ªúNG D·∫™N (QUAN TR·ªåNG) ===
DATA_DIRECTORY = "/data"
DOWNLOAD_DIRECTORY = os.path.join(DATA_DIRECTORY, "downloads")
STOPPED_STREAMERS_FILE = os.path.join(DATA_DIRECTORY, "stopped_streamers.txt")

# === C√ÅC TH√îNG S·ªê H·ªÜ TH·ªêNG ===
MAX_CONCURRENT_AUTO_DOWNLOADS = 15; MONITOR_INTERVAL_SECONDS = 180; CHECK_DELAY_SECONDS = 3; SELENIUM_TIMEOUT_SECONDS = 30; STATUS_UPDATE_INTERVAL_SECONDS = 10; MIN_PARTIAL_FILE_SIZE_MB = 10; MIN_SUCCESSFUL_DOWNLOAD_SIZE_MB = 20; LARGE_FILE_THRESHOLD_BYTES = 4 * 1024 * 1024 * 1024; UPLOAD_RETRY_COUNT = 5
RECONNECT_RETRY_DELAYS = [5, 10, 15]
CLEANUP_INTERVAL_HOURS = 1
FILE_MAX_AGE_HOURS = 15

# === BI·∫æN TO√ÄN C·ª§C ===
auto_download_semaphore = asyncio.Semaphore(MAX_CONCURRENT_AUTO_DOWNLOADS); conversion_semaphore = asyncio.Semaphore(1); active_streamers = set(); active_downloads = {}; download_stats = {"success": 0, "failed": 0, "converted": 0, "last_success": "N/A"}; admin_filter = filters.user(ADMIN_USERS); UPLOADER_CLIENT_INSTANCE = None; bot_client_instance = None
saved_videos = []
saved_video_id_counter = 1
stopped_streamers = set()

# === KH·ªûI T·∫†O ·ª®NG D·ª§NG WEB ===
app = FastAPI()

# === C√ÅC H√ÄM TI·ªÜN √çCH ===
def format_time(seconds):
    if seconds is None or not isinstance(seconds, (int, float)) or seconds < 0: return "N/A"
    h, m, s = int(seconds // 3600), int((seconds % 3600) // 60), int(seconds % 60)
    return f"{h:02d}:{m:02d}:{s:02d}"

def format_size(size_bytes):
    if size_bytes is None or not isinstance(size_bytes, (int, float)): return "0 B"
    if size_bytes < 1024: return f"{size_bytes} B"
    elif size_bytes < 1024**2: return f"{size_bytes/1024:.2f} KB"
    elif size_bytes < 1024**3: return f"{size_bytes/1024**2:.2f} MB"
    else: return f"{size_bytes/1024**3:.2f} GB"

async def get_video_duration(file_path: str) -> float | None:
    try:
        proc = await asyncio.create_subprocess_exec('ffprobe', '-v', 'error', '-show_entries', 'format=duration', '-of', 'default=noprint_wrappers=1:nokey=1', file_path, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = await proc.communicate()
        if proc.returncode == 0: return float(stdout.decode().strip())
        else: logger.error(f"FFprobe error for {file_path}: {stderr.decode()}"); return None
    except Exception as e: logger.error(f"Error getting duration for {file_path}: {e}"); return None

async def cleanup_files_with_retry(*files, retries=3, delay=2):
    for file_path in files:
        if not file_path or not os.path.exists(file_path): continue
        for attempt in range(retries):
            try:
                os.remove(file_path); break
            except OSError as e:
                if attempt < retries - 1: await asyncio.sleep(delay)
                else: logger.error(f"X√≥a file {os.path.basename(file_path)} th·∫•t b·∫°i. L·ªói: {e}")

# === LOGIC C·ªêT L√ïI (SELENIUM, DOWNLOAD, PROCESS, UPLOAD) ===

def create_selenium_driver():
    logger.info("ƒêang kh·ªüi t·∫°o Selenium..."); chrome_options = Options(); chrome_options.add_argument("--headless"); chrome_options.add_argument("--disable-gpu"); chrome_options.add_argument("--no-sandbox"); chrome_options.add_argument("--disable-dev-shm-usage"); chrome_options.add_argument("--log-level=3"); chrome_options.add_experimental_option('excludeSwitches', ['enable-logging'])
    try: service = Service(ChromeDriverManager().install()); driver = webdriver.Chrome(service=service, options=chrome_options); logger.info("‚úÖ Selenium ƒë√£ s·∫µn s√†ng."); return driver
    except Exception as e: logger.error(f"‚ùå L·ªói kh·ªüi t·∫°o Selenium: {e}"); return None

def _get_m3u8_with_selenium_blocking(driver: webdriver.Chrome, url: str) -> str | None:
    if not driver: return None
    logger.info(f"SELENIUM: B·∫Øt ƒë·∫ßu ki·ªÉm tra {url}...")
    try:
        driver.get("about:blank"); del driver.requests; driver.get(url); time.sleep(4)
        request = driver.wait_for_request('.m3u8', timeout=15)
        if request and request.response and "_blurred.m3u8" not in request.url:
            logger.info(f"‚úÖ SELENIUM: Online v√† ƒë√£ t√¨m th·∫•y HLS stream. -> {url}")
            return request.url
    except Exception: pass
    logger.info(f"üî¥ SELENIUM: Offline ho·∫∑c kh√¥ng t√¨m th·∫•y HLS stream. -> {url}")
    return None

async def _process_and_save_file(base_filename: str, streamer_name: str, ts_path: str):
    global saved_video_id_counter
    output_filepath_mp4 = ts_path.replace(".ts", ".mp4")
    
    try:
        if not os.path.exists(ts_path) or os.path.getsize(ts_path) < MIN_SUCCESSFUL_DOWNLOAD_SIZE_MB * 1024 * 1024:
            logger.info(f"[{streamer_name}] File .ts kh√¥ng t·ªìn t·∫°i ho·∫∑c qu√° nh·ªè, b·ªè qua.")
            return

        async with conversion_semaphore:
            logger.info(f"[{streamer_name}] B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi sang MP4...")
            ffmpeg_cmd = ['ffmpeg', '-i', ts_path, '-c', 'copy', '-movflags', '+faststart', '-bsf:a', 'aac_adtstoasc', '-y', output_filepath_mp4]
            proc = await asyncio.create_subprocess_exec(*ffmpeg_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            _, stderr = await proc.communicate()
            if proc.returncode != 0:
                logger.error(f"[{streamer_name}] FFmpeg th·∫•t b·∫°i. L·ªói: {stderr.decode()}"); download_stats["failed"] += 1; return
        
        logger.info(f"[{streamer_name}] Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng. X√≥a file .ts g·ªëc.")
        await cleanup_files_with_retry(ts_path)
        download_stats["converted"] += 1
        
        duration = await get_video_duration(output_filepath_mp4)
        if duration is None:
            logger.error(f"[{streamer_name}] Kh√¥ng th·ªÉ l·∫•y th·ªùi l∆∞·ª£ng video. H·ªßy l∆∞u."); await cleanup_files_with_retry(output_filepath_mp4); download_stats["failed"] += 1; return

        new_video = {"id": saved_video_id_counter, "name": streamer_name, "path": output_filepath_mp4, "duration": duration, "timestamp": datetime.now().strftime('%d-%m-%Y %H:%M'), "status": "ƒê√£ l∆∞u"}
        saved_videos.append(new_video)
        logger.info(f"‚úÖ [{streamer_name}] ƒê√£ x·ª≠ l√Ω v√† l∆∞u th√†nh c√¥ng video ID: {saved_video_id_counter}")
        saved_video_id_counter += 1
    finally:
        if base_filename in active_downloads: del active_downloads[base_filename]

async def download_and_process_stream(streamer_name: str, hls_url: str):
    if streamer_name in active_streamers: return
    active_streamers.add(streamer_name)
    now = datetime.now()
    base_filename = f"{streamer_name}_{now.strftime('%Y-%m-%d_%H-%M-%S')}"
    output_filepath_ts = os.path.join(DOWNLOAD_DIRECTORY, f"{base_filename}.ts")
    
    try:
        async with auto_download_semaphore:
            active_downloads[base_filename] = {"name": streamer_name, "status": "ƒêang t·∫£i", "start_time": time.time()}
            logger.info(f"[{streamer_name}] B·∫Øt ƒë·∫ßu t·∫£i...")
            streamlink_cmd = ['streamlink', '--stdout', hls_url, 'best']
            process = await asyncio.create_subprocess_exec(*streamlink_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            with open(output_filepath_ts, 'wb') as f:
                while True:
                    chunk = await process.stdout.read(8192)
                    if not chunk: break
                    f.write(chunk)
            
            await process.wait()
            logger.info(f"[{streamer_name}] T·∫£i xong. Giao cho t√°c v·ª• x·ª≠ l√Ω.")
            asyncio.create_task(_process_and_save_file(base_filename, streamer_name, output_filepath_ts))
    except Exception as e:
        logger.error(f"L·ªói khi t·∫£i c·ªßa `{streamer_name}`: {e}"); download_stats["failed"] += 1
    finally:
        active_streamers.discard(streamer_name)
        if base_filename in active_downloads: del active_downloads[base_filename]

async def upload_to_telegram(filepath, streamer_name):
    if not os.path.exists(filepath): return False
    try:
        duration = await get_video_duration(filepath)
        caption = f"üé• **{streamer_name}**\nüìÖ {datetime.now().strftime('%d-%m-%Y %H:%M')}\n‚è∞ Time: `{format_time(duration)}`"
        await UPLOADER_CLIENT_INSTANCE.send_video(chat_id=DEFAULT_UPLOAD_CHANNEL, video=filepath, caption=caption, supports_streaming=True)
        download_stats["success"] += 1
        return True
    except Exception as e:
        logger.error(f"‚ùå Upload l·ªói cho `{streamer_name}`: {e}"); download_stats["failed"] += 1; return False

# === API ENDPOINTS CHO GIAO DI·ªÜN WEB ===

app.mount("/static", StaticFiles(directory="static"), name="static")

@app.get("/", response_class=HTMLResponse)
async def read_root():
    with open("static/index.html", "r", encoding="utf-8") as f:
        return HTMLResponse(content=f.read())

@app.get("/api/status")
async def get_status():
    return {"active_downloads_count": len(active_downloads), "saved_videos_count": len(saved_videos), "stats": download_stats}

@app.get("/api/videos")
async def get_videos():
    return sorted(saved_videos, key=lambda v: v.get('id', 0), reverse=True)

@app.get("/video/{video_id}")
async def stream_video_endpoint(video_id: int, request: Request):
    video_info = next((v for v in saved_videos if v["id"] == video_id), None)
    if not video_info or not os.path.exists(video_info["path"]): raise HTTPException(status_code=404, detail="Video file not found.")
    file_path = video_info["path"]; file_size = os.stat(file_path).st_size; range_header = request.headers.get("range")
    headers = {"Content-Type": "video/mp4", "Accept-Ranges": "bytes", "Content-Length": str(file_size)}; start, end = 0, file_size - 1; status_code = 200
    if range_header:
        byte1, byte2 = range_header.split("=")[1].split("-"); start = int(byte1)
        if byte2: end = int(byte2)
        status_code = 206; headers["Content-Length"] = str(end - start + 1); headers["Content-Range"] = f"bytes {start}-{end}/{file_size}"
    def ranged_streamer(file_path: str, start: int, end: int):
        with open(file_path, "rb") as video_file:
            video_file.seek(start); remaining = end - start + 1
            while remaining > 0:
                chunk_size = min(remaining, 65536); chunk = video_file.read(chunk_size)
                if not chunk: break
                yield chunk; remaining -= len(chunk)
    return StreamingResponse(ranged_streamer(file_path, start, end), status_code=status_code, headers=headers)

@app.post("/api/action/{video_id}/{action_type}")
async def perform_action(video_id: int, action_type: str, request: Request):
    global saved_videos, saved_video_id_counter
    video = next((v for v in saved_videos if v["id"] == video_id), None)
    if not video: raise HTTPException(status_code=404, detail="Video not found")

    if action_type == "upload_telegram":
        video['status'] = 'ƒêang upload...'
        asyncio.create_task(upload_to_telegram(video["path"], video["name"]))
        return JSONResponse({"status": "success", "message": f"ƒê√£ b·∫Øt ƒë·∫ßu upload video {video_id} l√™n Telegram."})
    elif action_type == "delete":
        await cleanup_files_with_retry(video["path"])
        saved_videos = [v for v in saved_videos if v["id"] != video_id]
        return JSONResponse({"status": "success", "message": f"ƒê√£ x√≥a video {video_id}."})
    elif action_type == "cut":
        data = await request.json(); start_time, end_time = data.get("start"), data.get("end")
        if not start_time or not end_time: raise HTTPException(status_code=400, detail="Thi·∫øu th·ªùi gian b·∫Øt ƒë·∫ßu ho·∫∑c k·∫øt th√∫c.")
        original_mp4_path = video["path"]; streamer_name = video["name"]
        clip_path = os.path.join(DOWNLOAD_DIRECTORY, f"{os.path.splitext(os.path.basename(original_mp4_path))[0]}_highlight_{int(time.time())}.mp4")
        ffmpeg_cmd = ['ffmpeg', '-y', '-i', original_mp4_path, '-ss', start_time, '-to', end_time, '-c', 'copy', '-movflags', '+faststart', clip_path]
        proc = await asyncio.create_subprocess_exec(*ffmpeg_cmd); await proc.communicate()
        if proc.returncode != 0 or not os.path.exists(clip_path): raise HTTPException(status_code=500, detail="L·ªói khi c·∫Øt video.")
        clip_duration = await get_video_duration(clip_path)
        new_clip = {"id": saved_video_id_counter, "name": f"{streamer_name} (Highlight)", "path": clip_path, "duration": clip_duration, "timestamp": datetime.now().strftime('%d-%m-%Y %H:%M'), "status": "ƒê√£ l∆∞u (Clip)"}
        saved_videos.append(new_clip); saved_video_id_counter += 1
        return JSONResponse({"status": "success", "message": f"ƒê√£ t·∫°o clip m·ªõi v·ªõi ID {new_clip['id']}."})
    raise HTTPException(status_code=400, detail="H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá.")

# === T√ÅC V·ª§ N·ªÄN ===
async def monitor_streamers_task():
    logger.info("üîç B·∫Øt ƒë·∫ßu t√°c v·ª• gi√°m s√°t..."); driver = create_selenium_driver()
    if not driver: logger.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o Selenium, t√°c v·ª• gi√°m s√°t d·ª´ng l·∫°i."); return
    try:
        while True:
            # Logic l·∫•y danh s√°ch streamer t·ª´ message c·ªßa b·∫°n s·∫Ω ·ªü ƒë√¢y
            streamers_to_monitor = {"test_streamer_1", "test_streamer_2"} # V√≠ d·ª•
            logger.info(f"Qu√©t {len(streamers_to_monitor)} streamers...")
            for streamer_name in streamers_to_monitor:
                if streamer_name in active_streamers: continue
                hls_url = await asyncio.to_thread(_get_m3u8_with_selenium_blocking, driver, f"https://stripchat.com/{streamer_name}")
                if hls_url: asyncio.create_task(download_and_process_stream(streamer_name, hls_url))
                await asyncio.sleep(CHECK_DELAY_SECONDS)
            logger.info(f"--- Ho√†n t·∫•t chu k·ª≥ qu√©t. Ngh·ªâ {MONITOR_INTERVAL_SECONDS}s ---")
            await asyncio.sleep(MONITOR_INTERVAL_SECONDS)
    finally:
        if driver: logger.info("ƒêang ƒë√≥ng Selenium..."); driver.quit()

async def periodic_cleanup_task():
    while True:
        await asyncio.sleep(CLEANUP_INTERVAL_HOURS * 3600)
        logger.info("--- B·∫Øt ƒë·∫ßu t√°c v·ª• d·ªçn d·∫πp file c≈© ---")
        # Logic d·ªçn d·∫πp file c≈© c·ªßa b·∫°n s·∫Ω ·ªü ƒë√¢y

# === H√ÄM MAIN ƒê·ªÇ CH·∫†Y T·∫§T C·∫¢ ===
async def main():
    global UPLOADER_CLIENT_INSTANCE, bot_client_instance
    if not BOT_TOKEN: logger.error("L·ªñI: Bi·∫øn m√¥i tr∆∞·ªùng BOT_TOKEN ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!"); return
    
    # ƒê·∫£m b·∫£o c√°c th∆∞ m·ª•c d·ªØ li·ªáu t·ªìn t·∫°i
    Path(DATA_DIRECTORY).mkdir(exist_ok=True)
    Path(DOWNLOAD_DIRECTORY).mkdir(exist_ok=True)
    
    # Kh·ªüi t·∫°o c√°c client Pyrogram, ch·ªâ ƒë·ªãnh th∆∞ m·ª•c l√†m vi·ªác l√† /data
    uploader_client = Client("user_account_session", workdir=DATA_DIRECTORY, api_id=API_ID, api_hash=API_HASH)
    bot_client = Client("bot_instance_session", workdir=DATA_DIRECTORY, api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)
    
    UPLOADER_CLIENT_INSTANCE = uploader_client
    bot_client_instance = bot_client

    try:
        logger.info("ƒêang kh·ªüi ƒë·ªông c√°c client...")
        await uploader_client.start()
        me_uploader = await uploader_client.get_me()
        logger.info(f"‚úÖ User Client ƒë√£ ƒëƒÉng nh·∫≠p: {me_uploader.first_name}")
        
        await bot_client.start()
        me_bot = await bot_client.get_me()
        logger.info(f"‚úÖ Bot Client ƒë√£ ƒëƒÉng nh·∫≠p: @{me_bot.username}")
        
        config = uvicorn.Config(app, host="0.0.0.0", port=8000, log_level="info")
        server = uvicorn.Server(config)

        tasks = [
            asyncio.create_task(monitor_streamers_task()),
            asyncio.create_task(periodic_cleanup_task()),
            asyncio.create_task(server.serve())
        ]
        
        logger.info("======================================================")
        logger.info("‚úÖ H·ªÜ TH·ªêNG ƒê√É S·∫¥N S√ÄNG!")
        logger.info(f"üöÄ Giao di·ªán Web c√≥ t·∫°i: http://<IP_C·ª¶A_TRUENAS>:PORT_B·∫†N_CH·ªåN")
        logger.info("======================================================")
        
        await asyncio.gather(*tasks)
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói nghi√™m tr·ªçng khi kh·ªüi ƒë·ªông: {e}", exc_info=True)
    finally:
        logger.info("üîå ƒêang ng·∫Øt k·∫øt n·ªëi...")
        if uploader_client.is_connected: await uploader_client.stop()
        if bot_client.is_connected: await bot_client.stop()
        logger.info("‚úÖ H·ªá th·ªëng ƒë√£ d·ª´ng.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("üõë ƒê√£ tho√°t ch∆∞∆°ng tr√¨nh.")